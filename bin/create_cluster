#!/bin/zsh

set -e

ZONES=${ZONE:=${AWS_DEFAULT_REGION}a}
DEV_NODE_COUNT=2
ENV_NODE_COUNT=3
MASTER_SIZE=${MASTER_SIZE:=t2.medium}
NODE_SIZE=${NODE_SIZE:=t2.nano}

zparseopts -dev=DEV -cluster-name:=CLUSTER_NAME h=HELP -help=HELP -wait=WAIT \
  -vault=VAULT

function print_help() {
  print "Usage: "
  print -n "[NODE_COUNT=6] [NODE_SIZE=m5.large] [MASTER_SIZE=t2.nano] "
  print -n "[ZONES=us-west-1b] create_cluster [--dev] "
  print -n "--cluster-name example.k8s.local "
  print    "[--wait]"
  print
  print "Creates a k8s cluster."
  print '  --dev flag builds a smaller cluster.'
  print '  --wait flag waits for cluster to be read.'
  print -n '  --vault configure a vault auth backend for this cluster '
  print '(wait for the cluster completion even without --wait flag)'
  print
  print "Default values are:"
  print " > ZONES: $ZONES"
  print " > NODE_COUNT = $ENV_NODE_COUNT (dev $DEV_NODE_COUNT)"
  print " > MASTER_SIZE = $MASTER_SIZE"
  print " > NODE_SIZE = $NODE_SIZE"
}

if [[ "$HELP" != "" ]]; then
  print_help
  exit 0
fi

if [[ "$DEV" == --dev ]]; then
  DEFAULT_NODE_COUNT=${DEV_NODE_COUNT}
else
  DEFAULT_NODE_COUNT=${ENV_NODE_COUNT}
fi

NODE_COUNT=${NODE_COUNT:=${DEFAULT_NODE_COUNT}}

if [[ "$CLUSTER_NAME" == "" ]]; then
  >&2 print -P "%F{red}--cluster-name argument must be given.%f"
  exit 1
fi

color=blue

print -P  "%F{$color}"
print -nP "Creating a k8s cluster named %F{yellow}${CLUSTER_NAME[2]}%F{$color} "
print -P  "using kops with the following options:"
print -P  " > zones: %F{yellow}$ZONES%F{$color}"
print -P  " > node count: %F{yellow}$NODE_COUNT%F{$color}"
print -P  " > master size: %F{yellow}$MASTER_SIZE%F{$color}"
print -P  " > node size: %F{yellow}$NODE_SIZE%F{$color}"
print -P  "%f"

cidr=$(aws ec2 describe-vpcs | jq -r '.Vpcs[].CidrBlock' | python -c "import sys
cidrs = []
for line in sys.stdin:
  cidrs.append(line.rstrip())
for i in range(0,256):
  cidr = \"172.\" + str(i) + \".0.0/16\"
  if cidr not in cidrs:
    print cidr
    break")

kops create cluster \
  --kubernetes-version "1.13.3" \
  --zones $ZONES \
  --cloud aws \
  --node-count $NODE_COUNT \
  --master-size $MASTER_SIZE \
  --node-size $NODE_SIZE \
  --name ${CLUSTER_NAME[2]} \
  --network-cidr $cidr \
  --yes

if [[ "$WAIT" != "--wait" && "$VAULT" != "--vault" ]]; then
  exit 0
fi

while ! kops validate cluster 2>&1 >/dev/null
do
  sleep 5
done

kops validate cluster

if [[ "$VAULT" == "--vault" ]]; then
  vault-k8s-config
fi
